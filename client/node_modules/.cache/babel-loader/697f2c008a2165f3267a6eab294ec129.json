{"ast":null,"code":"import _classCallCheck from \"/Users/michaelmarceca/Codesmith/GQLTut/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelmarceca/Codesmith/GQLTut/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelmarceca/Codesmith/GQLTut/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelmarceca/Codesmith/GQLTut/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelmarceca/Codesmith/GQLTut/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelmarceca/Codesmith/GQLTut/client/src/components/BookDetails.js\";\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries'; //Redux\n\nimport store from '../store';\nimport * as types from './constants/actions';\n\nvar BookDetails =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookDetails, _Component);\n\n  function BookDetails() {\n    _classCallCheck(this, BookDetails);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BookDetails).apply(this, arguments));\n  }\n\n  _createClass(BookDetails, [{\n    key: \"displayBookDetails\",\n    value: function displayBookDetails() {\n      var book = this.props.data.book;\n\n      if (book) {\n        // console.log(book)\n        if (store.onLoad === false) {\n          store.dispatch(types.singleBook(book));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, book.name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, book.genre), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, book.author.name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \"All Books by \", book.author.name), React.createElement(\"ul\", {\n          className: \"other-books\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, book.author.book.map(function (book) {\n          return React.createElement(\"li\", {\n            key: book.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, book.name);\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \"No Book Selected...\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"book-details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, this.displayBookDetails());\n    }\n  }]);\n\n  return BookDetails;\n}(Component);\n\nexport default graphql(getBookQuery, {\n  options: function options(props) {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n})(BookDetails);","map":{"version":3,"sources":["/Users/michaelmarceca/Codesmith/GQLTut/client/src/components/BookDetails.js"],"names":["React","Component","graphql","getBookQuery","store","types","BookDetails","book","props","data","onLoad","dispatch","singleBook","name","genre","author","map","id","displayBookDetails","options","variables","bookId"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;;IAEMC,W;;;;;;;;;;;;;yCACiB;AAAA,UACXC,IADW,GACF,KAAKC,KAAL,CAAWC,IADT,CACXF,IADW;;AAEnB,UAAGA,IAAH,EAAS;AACP;AACA,YAAGH,KAAK,CAACM,MAAN,KAAiB,KAApB,EAA2B;AACzBN,UAAAA,KAAK,CAACO,QAAN,CAAeN,KAAK,CAACO,UAAN,CAAiBL,IAAjB,CAAf;AACD;;AACD,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAI,CAACM,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIN,IAAI,CAACO,KAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIP,IAAI,CAACQ,MAAL,CAAYF,IAAhB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAiBN,IAAI,CAACQ,MAAL,CAAYF,IAA7B,CAJF,EAKE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEIN,IAAI,CAACQ,MAAL,CAAYR,IAAZ,CAAiBS,GAAjB,CAAqB,UAAAT,IAAI,EAAI;AAC3B,iBAAO;AAAI,YAAA,GAAG,EAAEA,IAAI,CAACU,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmBV,IAAI,CAACM,IAAxB,CAAP;AACD,SAFD,CAFJ,CALF,CADF;AAeD,OApBD,MAoBO;AACL,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;AACF;;;6BACQ;AACP,aACE;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKK,kBAAL,EADH,CADF;AAKD;;;;EAjCuBjB,S;;AAoC1B,eAAeC,OAAO,CAACC,YAAD,EAAe;AACnCgB,EAAAA,OAAO,EAAE,iBAACX,KAAD,EAAW;AAClB,WAAO;AACLY,MAAAA,SAAS,EAAE;AACTH,QAAAA,EAAE,EAAET,KAAK,CAACa;AADD;AADN,KAAP;AAKD;AAPkC,CAAf,CAAP,CAQZf,WARY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\n//Redux\nimport store from '../store';\nimport * as types from './constants/actions';\n\nclass BookDetails extends Component {\n  displayBookDetails() {\n    const { book } = this.props.data;\n    if(book) {\n      // console.log(book)\n      if(store.onLoad === false) {        \n        store.dispatch(types.singleBook(book))\n      }\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All Books by {book.author.name}</p>\n          <ul className=\"other-books\">\n            {\n              book.author.book.map(book => {\n                return <li key={book.id}>{book.name}</li>\n              })\n            }\n          </ul>\n        </div>\n      )\n    } else {\n      return <div>No Book Selected...</div>\n    }\n  }\n  render() {\n    return(\n      <div id=\"book-details\">\n        {this.displayBookDetails()}\n      </div>\n    )\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    }\n  }\n})(BookDetails);"]},"metadata":{},"sourceType":"module"}